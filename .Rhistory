<<<<<<< HEAD
test = read.csv("test.csv", stringsAsFactors = F)
test$ID <- as.character(test$ID)
# Combine test & training data
train <- bind_rows(train, test)
train$OutcomeType<-as.factor(train$OutcomeType)
train$OutcomeSubtype<-as.factor(train$OutcomeSubtype)
train$AnimalType<-as.factor(train$AnimalType)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
#This code block is forked from Megan Risdal
outcome <- train[1:26729, ] %>%
group_by(AnimalType, OutcomeType) %>%
#Summary of outcomes (This code block is forked from Megan Risdal & edited by myself)
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
#Format Date
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
train$time <- hm(split[,2])
sex <- train[1:26729, ] %>%
group_by(AnimalType, SexuponOutcome, OutcomeType) %>%
summarise(num_animals = n())
ggplot(subset(sex,SexuponOutcome %in% c("Intact Female","Intact Male","Neutered Male","Spayed Female")),
aes(x = SexuponOutcome, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
facet_wrap(~AnimalType) +
coord_flip() +
labs(y = 'Proportion of Animals',
x = 'Animal',
title = 'Outcomes by Sex: Cats & Dogs') + theme_bw()
#Names
train$Name[4574]<-"No Name" # miscoded name causes error
train$Name[6553] <-"No Name"
train$Name[8306] <-"No Name"
train$Name[11693] <-"No Name"
train$Name[20444] <-"No Name"
train$Name[24755] <-"No Name"
train$Name<-ifelse(nchar(train$Name)== 0, "No Name", train$Name) #Assign "No Name" to animals with no name.
#Animal Age
split<-str_split_fixed(train$AgeuponOutcome," ", 2) # split value and unit of time
split[,2]<-gsub("s","",split[,2]) #remove tailing "s"
#create a vector to multiply
multiplier <- ifelse(split[,2] == 'day', 1,
ifelse(split[,2] == 'week', 7,
ifelse(split[,2] == 'month', 30,
ifelse(split[,2] == 'year', 365, NA))))
train$days_old <- as.numeric(split[,1]) * multiplier #apply the multiplier
train$days_old[1:5] #compare, looks good
train$AgeuponOutcome[1:5]
#Animal Breed
(unique(train$Breed)) #1379 unique breeds, let's narrow that down a bit
breed1<-str_split_fixed(train$Breed,"/",2) # split on "\" and keep first group
breed.simple<- gsub(" Mix","",breed1[,1]) # split on "Mix" and keep first breed
unique(breed.simple) # down to 220 breeds but still too many for our algorithm (MAX factor levels for RF is 53
#Animal Color
color<-str_split_fixed(train$Color," ",2) # split on " " and keep first group
color<-color[,1] # split on " " and keep first color
color<-str_split_fixed(color,"/",2) #split on "/"
color<-color[,1] # keep first group
train$color_simple<-as.factor(color) #treat color as factor
#need to further remove colors
color <- train[1:26729, ] %>%
group_by(color_simple, AnimalType) %>%
summarise(num_animals = n())
#Distribution of Age(in days) of the animals
age <- train[1:26729, ] %>%
group_by(AnimalType,days_old, OutcomeType) %>%
summarise(num_animals = n())
ggplot(age, aes(x= days_old, y = num_animals, fill=OutcomeType)) +
geom_bar(stat = 'identity',position = 'fill', width=350)+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
#Flagging Aggressive Breeds
breed <- train[1:26729, ] %>%
group_by(AnimalType,breed_simple, OutcomeType, OutcomeSubtype) %>%
summarise(num_animals = n())
ggplot(breed, aes(x= OutcomeType, y = num_animals, fill=OutcomeSubtype)) +
geom_bar(stat = 'identity',position = 'fill')+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
#Univariate Analysis
dim(train) #the dataset contains 26,729 observations and was given to us by the Austin Animal Shelter
str(train) #we have 9 predictor variables
levels(train$OutcomeType)
#Exploring the variables
str(train)
#-----MODEL BUILDING-----
for(i in 1:ncol(train)){
train[is.na(train[,i]), i] <- mean(train[,i], na.rm = TRUE) #replace NAs with column means
}
#Turn variables into factors
factorVars <- c('OutcomeType','OutcomeSubtype','AnimalType',
'SexuponOutcome','AgeuponOutcome','breed_simple','color_simple')
train[factorVars] <- lapply(train[factorVars], function(x) as.factor(x))
#split training & testing
train <- train[1:26729, ]
test  <- train[26730:nrow(full), ]
train <- train[1:26729, ]
test  <- train[26730:nrow(full), ]
rf1<-randomForest(OutcomeType~Name+AnimalType+SexuponOutcome+days_old+color_simple+OutcomeSubtype,
data=train,importance=T, ntree=500)
sum(is.na(train))
for(i in 1:ncol(train)){
train[is.na(train[,i]), i] <- mean(train[,i], na.rm = TRUE) #replace NAs with column means
}
for(i in 1:ncol(train)){
train[is.na(train[,i]), i] <- mean(train[,i], na.rm = TRUE) #replace NAs with column means
}
sum(is.na(train))
sum(is.na(train$Name))
sum(is.na(train$days_old))
subset(train, is.na(train$days_old)=="NA")
subset(train, is.na(train$days_old)=="NA")
m<-subset(train, is.na(train$days_old)=="NA")
m
m<-subset(train, is.na(train$days_old)==TRUE)
m
m<-subset(train, is.na(train$days_old)==TRUE)
m
help(replace)
m$days_old<-replace(m$days_old,mean(days_old))
ifelse(is.na(train$days_old)==TRUE, mean(train$days_old), train$days_old))))
ifelse(is.na(train$days_old)==TRUE, mean(train$days_old), train$days_old)
sum(is.na(train$days_old))
help(impute)
train$days_old[is.na(train$days_old)] = mean(train$days_old, na.rm=TRUE)
sum(is.na(train$days_old))
train$days_old[is.na(train$days_old)] = mean(train$days_old, na.rm=TRUE) #impute missing values
train$days_old[1:5] #compare, looks good
train$AgeuponOutcome[1:5]
=======
})
par(mfrow=c(1,3))
range(data$Annual_Renters_Insurance_Premium)
output$plots <- renderPlot({
range(data$Annual_Renters_Insurance_Premium)
range(data$Annual_Renters_Insurance_Premium)
output$plots <- renderPlot({
auto = ggplot(data, aes(data$Monthly_Auto_Premium)) +
geom_histogram(aes(fill = ..count..), binwidth=5)+
xlab("Insurance Premium") +
#-----SECTION 1: DATA PREPARATION-----
require("ggplot2")
require("gridExtra")
require(rpart)
require(rpart.plot)
require("caret")
data<-load('/Users/etavares/Desktop/STAT_474/Data/AdmissionsData.rdata')
data = Admissions
#Change data types
data$admit<-as.factor(data$admit)
data$anglo<-as.factor(data$anglo)
data$asian<-as.factor(data$asian)
data$black<-as.factor(data$black)
data$sex<-as.factor(data$sex)
data$income <-log(data$income) #take the log of income
#No dataing, Testing or evaluation sets
#-----SECTION 2: UNIVARIATE EXPLORATION & GRAPHS-----
#Admission Rate
summary(data)
table(data$sati.verb)
#summary of ethnic breakdown for the sample
a <-table(data$asian) #3417 asian
b <-table(data$black) #356 black
w <-table(data$anglo) #2810
table(data$asian)# 3417
table(data$anglo) #2810
table(data$black) #356
admit.rate = 2686/(2686+6014);admit.rate #31%
#Weighted GPA
gpa = ggplot(data, aes(data$gpa.wtd)) +
geom_histogram(aes(fill = ..count..), binwidth=.2)+
xlab("Weighted GPA") +
ylab("Frequency") + xlim(0,5) + ggtitle("Histogram of Weighted GPA") +
scale_fill_gradient("Count", low = "red", high = "green") + theme_bw()
gpa
#SAT Verbal Score
verb = ggplot(data, aes(data$sati.verb)) +
geom_histogram(aes(fill = ..count..), binwidth=50)+
xlab("SAT Verbal Score") +
ylab("Frequency") + xlim(0,800) + ggtitle("Histogram of SAT Verbal") +
scale_fill_gradient("Count", low = "red", high = "green") + theme_bw()
verb
#SAT Math Score
math = ggplot(data, aes(data$sati.math)) +
geom_histogram(aes(fill = ..count..), binwidth=50)+
xlab("SAT Math Score") +
ylab("Frequency") + xlim(0,800) + ggtitle("Histogram of SAT Math") +
scale_fill_gradient("Count", low = "red", high = "green") + theme_bw(plot.title = element_text(size=30)
math
grid.arrange(gpa, verb, math, ncol = 1) #arranging grids
#HH Income
income = ggplot(data, aes(data$income)) +
geom_histogram(aes(fill = ..count..),binwidth = 5000) +
xlab("Income") + ylab("Frequency") + xlim(0,100000)+ggtitle("Histogram of HH Income")+
scale_fill_gradient("Count", low = "red", high = "green") + theme_bw()
income
summary(data$income)
#-----SECTION 3: MULTIVARIATE EXPLORATION & GRAPHS-----
par(mfrow=c(2,2))
#Compare MATH & VERBAL SAT Scores
plot(sati.math~sati.verb,data, main = "SAT Math & Verbal Scores")
line = lm(sati.math~sati.verb, data=data)
#plot(line)
abline(line, col="red",lwd=4  )
summary(line) #There is a strong positive relationship present
#Compare Math SAT Score & Income
plot(sati.math~income,data, main = "SAT Math Scores & Income")
line = lm(sati.math~income, data=data)
abline(line, col="red",lwd=4 )
summary(line) #There is a slight positive relationship present
#Compare Math SAT Score & Weighted GPAs
plot(sati.math~gpa.wtd,data, main = "SAT Math Score & Weighted GPA")
line = lm(sati.math~gpa.wtd, data=data)
abline(line, col="red",lwd=4  )
summary(line) #There is a positive relationship present
missing.gpa<-data[which(data$gpa.wtd=="0"),]; missing.gpa #, 19 missing GPAs
#Compare HH Income & GPA
plot(income~gpa.wtd,data, main = "Weighted GPA & HH Income")
line = lm(income~gpa.wtd, data=data)
abline(line, col="red",lwd=4  )
summary(line) #There is a positive relationship present, 1724 missing observations
#-----MODEL BUILDING: RANDOM FORESTS-----
library(randomForest)
# random forests
names(data)
dim(data)
data = na.omit(data)
help(randomForest)
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
names(data)
dim(data)
data = na.omit(data)
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
help(randomForest)
rf1$importance
prp(tree,extra=1,faclen=5,varlen=10,cex=.75,
main="Classification Tree for College Admissions",
box.col=c("lightgreen","red")[out$frame$yval])
summary.tree<-printcp(tree)
plot(rf1,data, type="h",
col=c("red", "green", "blue")[as.numeric(data$admit)])
plot(rf1,data, type="h",
col=c("red", "blue")[(data$admit)])
plot(rf1,data, type="h")
plot(rf1, type="h")
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
plot.partial()
partialPlot(rf1,data=data)
partialPlot(rf1,data=data, data$admit)
partialPlot(rf1,data=data, data$admit, plot=TRUE)
partialPlot(rf1,data=data, data$admit, plot=TRUE)
partialPlot(rf1,data, data$admit, plot=TRUE)
partialPlot(rf1,data, data$admit, plot=TRUE)
partialPlot(rf1,data, as.numeric(data$admit), plot=TRUE)
rf1$importance # variable importance plot
summary(rf1)
rf1
4235+730
(4235+730)/8700
1-((4235+730)/8700)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=1000)
partialPlot(rf1,data, as.numeric(data$admit), plot=TRUE)
rf1$importance # variable importance plot
rf1
partialPlot(rf1,data, as.numeric(data$admit), plot=TRUE)
class(rf1)
str(data)
partialPlot(rf1,data, as.numeric(data$admit), plot=TRUE)
partialPlot(rf1,data, admit, plot=TRUE)
partialPlot(rf1,data, income, plot=TRUE)
str(data)
partialPlot(rf1,data, income, plot=TRUE)
class(rf1)
rf1$importance # variable importance plot
str(data)
partialPlot(rf1,data, gpa.wtd, plot=TRUE)
varImpPlot(rf1,type=1,scale=T,class="Employed",
main="Forecasting Importance Plot for Employment
(Unstandardized)",col="blue",cex=1,pch=19)
varImpPlot(rf1,type=1,scale=T,class="Admitted",
main="Forecasting Importance Plot for Employment
(Unstandardized)",col="blue",cex=1,pch=19)
str(data)
varImpPlot(rf1,type=1,scale=T,class="admit",
main="Forecasting Importance Plot for Employment
(Unstandardized)",col="blue",cex=1,pch=19)
help("varImpPlot")
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Employment
(Unstandardized)",col="blue",cex=1,pch=19)
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="blue",cex=1,pch=19)
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="blue",cex=.8,pch=25)
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="blue",cex=.8,pch=10)
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="red",cex=.8,pch=5)
varImpPlot(rf1, sort=T, type=1,scale=T,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="red",cex=.9,pch=5)
partialPlot(rf1,data, gpa.wtd, plot=TRUE)
str(data)
partialPlot(rf1,data, sati.verb, plot=TRUE)
par(mfrow=c(2,2))
str(data)
par(mfrow=c(2,2))
partialPlot(rf1,data, gpa.wtd, plot=TRUE)
partialPlot(rf1,data, sati.verb, plot=TRUE)
partialPlot(rf1,data, sati.math, plot=TRUE)
partialPlot(rf1,data, income, plot=TRUE)
help(varImpPlot)
varImpPlot(rf1, sort=T, type=2,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="red",cex=.9,pch=5)
varImpPlot(rf1, sort=T, type=2,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="red",cex=.9,pch=5)
varImpPlot(rf1, sort=T, type=1,
main="Forecasting Importance Plot for Admittance
(Standardized)",col="red",cex=.9,pch=5)
rf1
help(randomForest)
help("partialPlot")
partialPlot(rf1,data, gpa.wtd, plot=T, rug=T)
data$gpa
data$gpa==0
sum(data$gpa==0)
hist(data$gpa)
sum(data$gpa<1)
sum(data$gpa<2)
help(abline)
partialPlot(rf1,data, gpa.wtd, plot=T, rug=T)
abline(h=0)
abline(h=0, color="RED")
abline(h=0, col="RED")
abline(h=0, col="red", pch=1)
par(mfrow=c(2,2))
partialPlot(rf1,data, gpa.wtd, plot=T, rug=T)
abline(h=0, col="red")
partialPlot(rf1,data, sati.verb, plot=TRUE)
abline(h=0, col="red")
partialPlot(rf1,data, sati.math, plot=TRUE)
abline(h=0, col="red")
partialPlot(rf1,data, income, plot=TRUE)
abline(h=0, col="red")
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail,classwt=c(4,1), ntree=500)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail,classwt=c(1,4), ntree=500)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail,classwt=c(1,3), ntree=500)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
rf1<-randomForest(as.factor(admit)~., na.action=na.omit,
rf1<-randomForest(as.factor(admit)~., na.action=na.omit,
type="class", method="class", data=data,importance=T,sampsize=c(200,1000))
rf1<-randomForest(as.factor(admit)~., na.action=na.omit,
type="class", method="class", data=data,importance=T,sampsize=c(200,1000))
rf1<-randomForest(as.factor(admit)~., na.action=na.omit,
type="class", method="class", data=data,importance=T,sampsize=c(200,1000))
part1<-partialPlot(rf1,pred.data=vals,x.var=sati.math,
rug=T,which.class=as.factor(1))
part2<-partialPlot(rf1,pred.data=vals,x.var=sati.read,
rug=T,which.class=as.factor(1))
part1<-partialPlot(rf1,pred.data=vals,x.var=sati.math,
rug=T,which.class=as.factor(1))
rf1$vals
rf1<-randomForest(as.factor(admit)~.anglo+asian+black+gpa.wtd+sati.verb+sati.math+income+sex, na.action=na.omit,
type="class", method="class", data=Admissions,importance=T,sampsize=c(200,1000))
rf1<-randomForest(as.factor(admit)~anglo+asian+black+gpa.wtd+sati.verb+sati.math+income+sex, na.action=na.omit,
type="class", method="class", data=Admissions,importance=T,sampsize=c(200,1000))
part1<-partialPlot(rf1,pred.data=vals,x.var=sati.math,
rug=T,which.class=as.factor(1))
part2<-partialPlot(rf1,pred.data=data,x.var=sati.read,
rug=T,which.class=as.factor(1))
part1<-partialPlot(rf1,data,x.var=sati.math,
rug=T,which.class=as.factor(1))
part1<-partialPlot(rf1,data,x.var=sati.math,
rug=T,which.class=as.factor(1))
str(data)
part1<-partialPlot(rf1,data,data$sati.math,
rug=T,which.class=as.factor(1))
part1
part1<-partialPlot(rf1,data,data$sati.math,
rug=T,which.class=as.factor(1))
help(partialPlot)
part1<-partialPlot(rf1,data,data$sati.math,
rug=T,which.class=1)
part1<-partialPlot(rf1,data,data$sati.math,
rug=T,which.class="admit")
part1<-partialPlot(rf1,pred.data=data,x.var=sati.math,
rug=T,which.class="admit")
part1<-partialPlot(rf1,pred.data=data,x.var=sati.math,
rug=T,which.class=as.factor("admit")
part1<-partialPlot(rf1,pred.data=data,x.var=sati.math,
rug=T,which.class=as.factor("admit")
part1<-partialPlot(rf1,pred.data=data,x.var=sati.math,
rug=T,which.class=as.factor("admit"))
part1<-partialPlot(rf1,pred.data=data,x.var=sati.math,
rug=T)
part1<-partialPlot(rf1,data,sati.math,
rug=T)
part1<-partialPlot(rf1,data,sati.math, type="class"
rug=T)
part1<-partialPlot(rf1,data,sati.math,type="class",
rug=T)
rf2<-randomForest(admit~.,
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
part1<-partialPlot(rf1,data,sati.math,type="class",
rug=T)
part1<-partialPlot(rf1,data,sati.math,
rug=T)
rf1<-randomForest(admit~.,
data=data,importance=T, na.action=na.fail, ntree=500)
rf1
MDSplot(rf3, k=2, palette=NULL, pch=20, ...)
MDSplot(rf3, k=2, palette=NULL, pch=20)
MDSplot(rf2, k=2, palette=NULL, pch=20)
MDSplot(rf1, k=2, palette=NULL, pch=20)
df <- read.csv("~/Downloads/LoanStats3d.csv", h=T, stringsAsFactors=F, skip=1)
require(e1071)
x = matrix(rnorm(20*2), ncol =2)
y = c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
x = matrix(rnorm(50*2), ncol =2)
y = c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
dat = data.frame(x=x,y=as.factor(y))
x = matrix(rnorm(20*2), ncol =2)
y = c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
dat = data.frame(x=x,y=as.factor(y))
dat
svmfit = svm(y~.,data=dat,kernel="linear", cost = 10, scale=F)
svmfit
plot(svmfit)
plot(svmfit, dat)
par(mfrow=c(1,2))
plot(svmfit, dat)
plot(dat)
plot(dat)
par(mfrow=c(1,2))
plot(svmfit, dat)
plot(x, col=(3-y))
par(mfrow=c(2,1))
plot(svmfit, dat)
plot(x, col=(3-y))
par(mfrow=c(2,1))
plot(svmfit, dat)
plot(x, col=(3-y))
par(mfrow=c(2,1))
plot(svmfit, dat)
plot(x, col=(3-y))
plot(x, col=(3-y))
plot(svmfit, dat)
svmfit = svm(y~.,data=dat,kernel="linear", cost = 11, scale=F)
svmfit = svm(y~.,data=dat,kernel="linear", cost = 1, scale=F)
plot(svmfit, dat)
svmfit = svm(y~.,data=dat,kernel="linear", cost = 1, scale=F)
plot(svmfit, dat)
svmfit = svm(y~.,data=dat,kernel="linear", cost = 100, scale=F)
plot(svmfit, dat)
svmfit$index
svmfit = svm(y~.,data=dat,kernel="linear", cost = 10, scale=F)
par(mfrow=c(2,1))
plot(svmfit, dat)
plot(x, col=(3-y))
svmfit$index
summary(svmfit)
tune.out=tune(svm,y~.data=dat,kernel="linear", ranges = list(cost=c(.001,.01,1,5,10,100)))
tune.out=tune(svm,y~.,data=dat,kernel="linear", ranges=list(cost=c(.001,.01,1,5,10,100)))
summary(tune.out)
plot(svmfit, dat)
tune.out=tune(svm,y~.,data=dat,kernel="linear", ranges=list(cost=c(.001,.01,1,5,10,100)))
summary(tune.out)
data(Glass, package="mlbench")
data
str(data)
require(mlbench)
str(data)
install.packages("mlbench")
install.packages("mlbench")
data(Glass, package="mlbench")
data
dat = (Glass, package="mlbench")
dat(Glass, package="mlbench")
data(Glass, package="mlbench")
Glass
glass = Glass
str(data)
str(glass)
index <- 1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
testindex <- sample(index, trunc(length(index)/3))
testset <- glass[testindex,]
trainset <- glass[-testindex,]
trainset
dim(trainset)
dim(testset)
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testset[,-10])
svm.model
svm.pred
index <- 1:nrow(glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- glass[testindex,]
trainset <- glass[-testindex,]
#SVM
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testset[,-10])
svm.pred
svm.model
svm.model <- svm(Type ~ ., data = trainset, ranges=list(cost=c(.001,.01,1,5,10,100)), gamma = 1)
svm.pred <- predict(svm.model, testset[,-10])
svm.model
plot(svm,model, trainset)
plot(svm.model, trainset)
svm.model <- svm(Type ~ ., data = trainset, ranges=list(cost=c(.001,.01,1,5,10,100)), gamma = 1)
svm.model
plot(svmfit, dat)
plot(svm.model, trainset)
plot(svm.model, trainset)
plot(svm.model, trainset)
library(ggplot2) #data viz
library(dplyr) #data manipulation
library(randomForest) #for classification
library(stringr)#for dates
library(ggthemes)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
#-----ANIMAL SHELTER DATA-----
#load libraries
library(ggplot2) #data viz
library(dplyr) #data manipulation
library(randomForest) #for classification
library(stringr)#for dates
library(ggthemes)
<<<<<<< HEAD
=======
install.packages('ggthemes', dependencies = TRUE)
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
#------GET & EXPLORE THE DATA------
dir= ("/Users/etavares/Documents/Data Science/Kaggle/Animal_Shelter/")
setwd(dir)
train = read.csv("train.csv", stringsAsFactors = F)
<<<<<<< HEAD
#so test & train sets match
names(train)[1]="ID"
test = read.csv("test.csv", stringsAsFactors = F)
test$ID <- as.character(test$ID)
# Combine test & training data
train <- bind_rows(train, test)
=======
str(train)
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
train$OutcomeType<-as.factor(train$OutcomeType)
train$OutcomeSubtype<-as.factor(train$OutcomeSubtype)
train$AnimalType<-as.factor(train$AnimalType)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
#This code block is forked from Megan Risdal
outcome <- train[1:26729, ] %>%
group_by(AnimalType, OutcomeType) %>%
#Summary of outcomes (This code block is forked from Megan Risdal & edited by myself)
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
<<<<<<< HEAD
=======
#so test & train sets match
names(train)[1]="ID"
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
#Format Date
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
train$time <- hm(split[,2])
<<<<<<< HEAD
sex <- train[1:26729, ] %>%
group_by(AnimalType, SexuponOutcome, OutcomeType) %>%
summarise(num_animals = n())
=======
#This code block is forked from Megan Risdal
sex <- train[1:26729, ] %>%
group_by(AnimalType, SexuponOutcome, OutcomeType) %>%
summarise(num_animals = n())
#Summary of outcomes (This code block is forked from Megan Risdal & edited by myself)
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
ggplot(subset(sex,SexuponOutcome %in% c("Intact Female","Intact Male","Neutered Male","Spayed Female")),
aes(x = SexuponOutcome, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
facet_wrap(~AnimalType) +
coord_flip() +
labs(y = 'Proportion of Animals',
x = 'Animal',
title = 'Outcomes by Sex: Cats & Dogs') + theme_bw()
#Names
train$Name[4574]<-"No Name" # miscoded name causes error
train$Name[6553] <-"No Name"
train$Name[8306] <-"No Name"
train$Name[11693] <-"No Name"
train$Name[20444] <-"No Name"
train$Name[24755] <-"No Name"
train$Name<-ifelse(nchar(train$Name)== 0, "No Name", train$Name) #Assign "No Name" to animals with no name.
#Animal Age
split<-str_split_fixed(train$AgeuponOutcome," ", 2) # split value and unit of time
split[,2]<-gsub("s","",split[,2]) #remove tailing "s"
#create a vector to multiply
multiplier <- ifelse(split[,2] == 'day', 1,
ifelse(split[,2] == 'week', 7,
ifelse(split[,2] == 'month', 30,
ifelse(split[,2] == 'year', 365, NA))))
train$days_old <- as.numeric(split[,1]) * multiplier #apply the multiplier
<<<<<<< HEAD
sum(is.na(train$days_old)) #some missingness
train$days_old[is.na(train$days_old)] = mean(train$days_old, na.rm=TRUE) #impute missing values
train$days_old[1:5] #compare, looks good
train$AgeuponOutcome[1:5]
=======
train$days_old[1:5] #compare, looks good
train$AgeuponOutcome[1:5]
str(train)
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
#Animal Breed
(unique(train$Breed)) #1379 unique breeds, let's narrow that down a bit
breed1<-str_split_fixed(train$Breed,"/",2) # split on "\" and keep first group
breed.simple<- gsub(" Mix","",breed1[,1]) # split on "Mix" and keep first breed
<<<<<<< HEAD
unique(breed.simple) # down to 220 breeds but still too many for our algorithm (MAX factor levels for RF is 53
#Animal Color
color<-str_split_fixed(train$Color," ",2) # split on " " and keep first group
color<-color[,1] # split on " " and keep first color
color<-str_split_fixed(color,"/",2) #split on "/"
color<-color[,1] # keep first group
train$color_simple<-as.factor(color) #treat color as factor
#need to further remove colors
color <- train[1:26729, ] %>%
group_by(color_simple, AnimalType) %>%
summarise(num_animals = n())
=======
unique(breed.simple) # down to 220 breeds
train$breed.simple<-breed.simple
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
#Distribution of Age(in days) of the animals
age <- train[1:26729, ] %>%
group_by(AnimalType,days_old, OutcomeType) %>%
summarise(num_animals = n())
ggplot(age, aes(x= days_old, y = num_animals, fill=OutcomeType)) +
geom_bar(stat = 'identity',position = 'fill', width=350)+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
<<<<<<< HEAD
#Flagging Aggressive Breeds
breed <- train[1:26729, ] %>%
group_by(AnimalType,breed_simple, OutcomeType, OutcomeSubtype) %>%
summarise(num_animals = n())
ggplot(breed, aes(x= OutcomeType, y = num_animals, fill=OutcomeSubtype)) +
geom_bar(stat = 'identity',position = 'fill')+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
#Univariate Analysis
dim(train) #the dataset contains 26,729 observations and was given to us by the Austin Animal Shelter
str(train) #we have 9 predictor variables
levels(train$OutcomeType)
#Exploring the variables
str(train)
#-----MODEL BUILDING-----
#Turn variables into factors
factorVars <- c('OutcomeType','OutcomeSubtype','AnimalType',
'SexuponOutcome','AgeuponOutcome','breed_simple','color_simple')
train[factorVars] <- lapply(train[factorVars], function(x) as.factor(x))
#split training & testing
train <- train[1:26729, ]
test  <- train[26730:nrow(full), ]
rf1<-randomForest(OutcomeType~Name+AnimalType+SexuponOutcome+days_old+color_simple+OutcomeSubtype,
data=train,importance=T, ntree=500)
is.na(train$AnimalType)
sum(is.na(train$AnimalType))
sum(is.na(train$OutcomeType))
sum(is.na(train))
rf1<-randomForest(OutcomeType~Name+AnimalType+SexuponOutcome+days_old+color_simple+OutcomeSubtype,
data=train,importance=T, ntree=500)
sum(is.finite(train))
sum(is.finite(train))
str(train)
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
library(ggplot2) #data viz
library(dplyr) #data manipulation
library(randomForest) #for classification
library(stringr)#for dates
library(ggthemes)
library(lubridate)
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
outcome <- train[1:26729, ] %>%
group_by(AnimalType, OutcomeType) %>%
#Summary of outcomes (This code block is forked from Megan Risdal & edited by myself)
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
outcome <- train[1:26729, ] %>%
group_by(AnimalType, OutcomeType) %>%
summarise(num_animals = n())
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
split[,1]
split
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime
train = read.csv("train.csv", stringsAsFactors = F)
#so test & train sets match
names(train)[1]="ID"
test = read.csv("test.csv", stringsAsFactors = F)
test$ID <- as.character(test$ID)
# Combine test & training data
train <- bind_rows(train, test)
dim(train)
train$OutcomeType<-as.factor(train$OutcomeType)
train$OutcomeSubtype<-as.factor(train$OutcomeSubtype)
train$AnimalType<-as.factor(train$AnimalType)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
train$SexuponOutcome<-as.factor(train$SexuponOutcome)
#This code block is forked from Megan Risdal
outcome <- train[1:26729, ] %>%
group_by(AnimalType, OutcomeType) %>%
summarise(num_animals = n())
#Summary of outcomes (This code block is forked from Megan Risdal & edited by myself)
ggplot(outcome, aes(x = AnimalType, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
coord_flip() +
labs(y = '% of Animals',
x = 'Animal',
title = 'Outcomes: Cats & Dogs') + theme_bw()
#Format Date
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
split<-str_split_fixed(train$DateTime," ", 2)
train$DateTime <- mdy(split[,1]) #lubridate
names(train)[3] <- "date"
train$time <- hm(split[,2])
train$time
train$DateTime
split
sex <- train[1:26729, ] %>%
group_by(AnimalType, SexuponOutcome, OutcomeType) %>%
summarise(num_animals = n())
ggplot(subset(sex,SexuponOutcome %in% c("Intact Female","Intact Male","Neutered Male","Spayed Female")),
aes(x = SexuponOutcome, y = num_animals, fill = OutcomeType)) +
geom_bar(stat = 'identity', position = 'fill', colour = 'white') +
facet_wrap(~AnimalType) +
coord_flip() +
labs(y = 'Proportion of Animals',
x = 'Animal',
title = 'Outcomes by Sex: Cats & Dogs') + theme_bw()
train$Name[4574]<-"No Name" # miscoded name causes error
train$Name[6553] <-"No Name"
train$Name[8306] <-"No Name"
train$Name[11693] <-"No Name"
train$Name[20444] <-"No Name"
train$Name[24755] <-"No Name"
train$Name<-ifelse(nchar(train$Name)== 0, "No Name", train$Name) #Assign "No Name" to animals with no name.
is.na(train$Name)
sum(is.na(train$Name))
split<-str_split_fixed(train$AgeuponOutcome," ", 2) # split value and unit of time
split[,2]<-gsub("s","",split[,2]) #remove tailing "s"
#create a vector to multiply
multiplier <- ifelse(split[,2] == 'day', 1,
ifelse(split[,2] == 'week', 7,
ifelse(split[,2] == 'month', 30,
ifelse(split[,2] == 'year', 365, NA))))
train$days_old <- as.numeric(split[,1]) * multiplier #apply the multiplier
sum(is.na(train$days_old)) #some missingness
train$days_old[is.na(train$days_old)] = mean(train$days_old, na.rm=TRUE) #impute missing values
train$days_old[1:5] #compare, looks good
train$AgeuponOutcome[1:5]
sum(is.na(train$days_old)) #some missingness
(unique(train$Breed)) #1379 unique breeds, let's narrow that down a bit
breed1<-str_split_fixed(train$Breed,"/",2) # split on "\" and keep first group
breed.simple<- gsub(" Mix","",breed1[,1]) # split on "Mix" and keep first breed
unique(breed.simple) # down to 220 breeds but still too many for our algorithm (MAX factor levels for RF is 53
#Animal Color
color<-str_split_fixed(train$Color," ",2) # split on " " and keep first group
color<-color[,1] # split on " " and keep first color
color<-str_split_fixed(color,"/",2) #split on "/"
color<-color[,1] # keep first group
train$color_simple<-as.factor(color) #treat color as factor
#need to further remove colors
color <- train[1:26729, ] %>%
group_by(color_simple, AnimalType) %>%
summarise(num_animals = n())
age <- train[1:26729, ] %>%
group_by(AnimalType,days_old, OutcomeType) %>%
summarise(num_animals = n())
ggplot(age, aes(x= days_old, y = num_animals, fill=OutcomeType)) +
geom_bar(stat = 'identity',position = 'fill', width=350)+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
#Flagging Aggressive Breeds
breed <- train[1:26729, ] %>%
group_by(AnimalType,breed_simple, OutcomeType, OutcomeSubtype) %>%
summarise(num_animals = n())
ggplot(breed, aes(x= OutcomeType, y = num_animals, fill=OutcomeSubtype)) +
geom_bar(stat = 'identity',position = 'fill')+
facet_wrap(~AnimalType)+
labs(y = '% of Animals',
x = 'Age (in days)',
title = 'Outcomes by Age: Cats & Dogs') + theme_bw()
dim(train) #the dataset contains 26,729 observations and was given to us by the Austin Animal Shelter
str(train) #we have 9 predictor variables
levels(train$OutcomeType)
sum(is.finite(train))
sum(is.finite(train$days_old))
rf1<-randomForest(OutcomeType~Name+AnimalType,
data=train,importance=T, ntree=500)
train$OutcomeType
dim(train)
train <- train[1:26729, ]
dim(train)
test  <- train[26730:nrow(full), ]
dim(test)
head(test)
head(train)
rf1<-randomForest(OutcomeType~Name+AnimalType,
data=train,importance=T, ntree=500)
help("randomForest")
rf1<-randomForest(OutcomeType~Name+AnimalType,
data=train,importance=T, ntree=500, na.action=na.fail)
rf1<-randomForest(OutcomeType~AnimalType,
data=train,importance=T, ntree=500, na.action=na.fail)
rf1
str(train)
rf1<-randomForest(OutcomeType~AnimalType+days_old
data=train,importance=T, ntree=500, na.action=na.fail)
rf1<-randomForest(OutcomeType~AnimalType+days_old,
data=train,importance=T, ntree=500, na.action=na.fail)
rf1
str(train)
rf1<-randomForest(OutcomeType~AnimalType+days_old+color_simple,
data=train,importance=T, ntree=500, na.action=na.fail)
rf1
str(train)
rf1<-randomForest(OutcomeType~AnimalType+days_old+color_simple+date,
data=train,importance=T, ntree=500, na.action=na.fail)
hist(train$days_old)
train$young<-ifelse(train$days_old>=365,1,0)
train$young
str(train)
#Turn variables into factors
factorVars <- c('OutcomeType','OutcomeSubtype','AnimalType',
'SexuponOutcome','AgeuponOutcome','breed_simple','color_simple','young')
train[factorVars] <- lapply(train[factorVars], function(x) as.factor(x))
#split training & testing
train <- train[1:26729, ]
test  <- train[26730:nrow(full), ]
str(train)
rf1<-randomForest(OutcomeType~AnimalType+days_old+color_simple+young,
data=train,importance=T, ntree=50, na.action=na.fail)
rf1
str(train)
rf1<-randomForest(OutcomeType~AnimalType+days_old+color_simple+young+SexuponOutcome,
data=train,importance=T, ntree=50, na.action=na.fail)
rf1
rf1
rf1<-randomForest(OutcomeType~AnimalType+days_old+color_simple+young+SexuponOutcome,
data=train,importance=T, ntree=500, na.action=na.fail)
rf1
help(randomForest)
animal <- predict(rf1, test)
animal
animal <- predict(rf1, test$OutcomeType)
plot(rf1, ylim=c(0,1))
legend('topright', colnames(rf_mod$err.rate), col=1:6, fill=1:6)
plot(rf1, ylim=c(0,1))
legend('topright', colnames(rf1$err.rate), col=1:6, fill=1:6)
summary(rf1)
summary(rf1)
ggplot(rf1,aes(x=rf1$err.rate))
plot(rf1, ylim=c(0,1))
legend('topright', colnames(rf1$err.rate), col=1:6, fill=1:6)
conf.matrix2 <- table(test$OutcomeType, predict(rf1,type="class")) #tune model using eval data
test$OutcomeType
test
test  <- train[26730:nrow(full), ]
test
head(train)
conf.matrix2 <- table(test$OutcomeType, predict(rf1,type="class")) #tune model using eval data
help(legend)
legend('topright', inset=c(-0.2,0), colnames(rf1$err.rate), col=1:6, fill=1:6)
plot(rf1, ylim=c(0,1))
legend('topright', inset=c(-0.2,0), colnames(rf1$err.rate), col=1:6, fill=1:6)
legend('topright', inset=c(-0.2,-1), colnames(rf1$err.rate), col=1:6, fill=1:6)
plot(rf1, ylim=c(0,1))
legend('topright', inset=c(-0.2,-1), colnames(rf1$err.rate), col=1:6, fill=1:6)
plot(rf1, ylim=c(0,1))
legend('topright', inset=c(-0.5,0), colnames(rf1$err.rate), col=1:6, fill=1:6)
legend('topright', colnames(rf1$err.rate), col=1:6, fill=1:6)
rf1
str(train)
train$AgeuponOutcome[1:5]
train$Named<-ifelse(train$Name=="No Name",1,0) #Assign "No Name" to animals with no name.
train$Named
head(train)
head(train)
str(train)
train$Named<-ifelse(train$Name=="No Name",0,1) #Assign "No Name" to animals with no name.
str(train)
str(train)
train$young<-ifelse(train$days_old>=365,0,1)
=======
>>>>>>> 82735e8cc6583211fbbb96ba9f1a6f6da855c7e3
